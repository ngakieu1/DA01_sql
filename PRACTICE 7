Bai 1:
select 
extract(year from transaction_date) as year, 
product_id,
spend as curr_year_spend,
lag(spend) over (partition by product_id order by extract(year from transaction_date)) as prev_year_spend,
round((spend - lag(spend) over (partition by product_id order by extract(year from transaction_date)))/lag(spend) over (partition by product_id order by extract(year from transaction_date))*100.0, 2) as yoy_rate
from user_transactions
Bai 2:
SELECT t.card_name, t.issued_amount
from
(select 
card_name, issued_amount,
row_number () over (partition by card_name order by issue_year, issue_month)
as stt
FROM monthly_cards_issued) as t
where stt < 2
order by issued_amount desc
Bai 3:
SELECT t.user_id, t.spend, t.transaction_date
FROM
(select user_id, spend, transaction_date,
row_number() over(partition by user_id order by transaction_date) as stt
from transactions
) as t
where stt = 3
Bai 4:
WITH tb1 AS (
SELECT 
transaction_date,user_id,count(1) as purchase_count,
dense_rank() over(PARTITION BY user_id ORDER BY transaction_date desc) AS rn
FROM user_transactions
GROUP BY transaction_date,user_id
ORDER BY user_id
)
SELECT 
transaction_date,user_id,purchase_count
FROM tb1 
WHERE rn = 1
ORDER BY transaction_date
Bai 5:
with tb1 as( 
select 
  user_id, tweet_date, tweet_count,
  lag(tweet_count, 1, 0) over(partition by user_id order by tweet_date) as 1_day_prev,
  lag(tweet_count, 2, 0) over(partition by user_id order by tweet_date) as 2_day_prev
from tweets
)
SELECT
user_id, tweet_date,
round(1.0*(tweet_count + case 
when 1_day_prev < 0 then 0 else 1_day_prev end +
 + case 
when 2_day_prev < 0 then 0 else 2_day_prev end)/(1+
case 
when 1_day_prev < 0 then 0 else 1 end +
case 
when 2_day_prev < 0 then 0 else 1 end), 2) as rolling_avg_3d
from tb1

Bai 7:
with t_b1 as (
  SELECT
  category,
  product, 
  sum(spend) as total_spend,
  rank() over (partition by category order by sum(spend) desc) as rank
  from product_spend
  where extract(year from transaction_date) = 2022
  group by 1, 2
)
select 
category,
product,
total_spend
from t_b1
where rank < 3
order by category, rank;
Bai 8:
SELECT 
      artist_name,
      artist_rank
FROM (
      SELECT artists.artist_name AS artist_name,
            DENSE_RANK() OVER (ORDER BY COUNT(songs.song_id ) DESC) AS artist_rank
      FROM   global_song_rank, songs, artists
      WHERE  global_song_rank.rank <= 10 AND
            global_song_rank.song_id = songs.song_id AND
            songs.artist_id = artists.artist_id 
      GROUP BY artists.artist_name
) t1
WHERE artist_rank <= 5
