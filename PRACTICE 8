Bai 1:
with get1 as( 
select delivery_id, 
customer_id, 
order_date, 
row_number() over(partition by customer_id order by order_date asc) as stt, 
case when order_date = customer_pref_delivery_date then 'immediate' else 'scheduled' end as phan_loai 
from Delivery ) 
select round(100.0*(sum(case when phan_loai = 'immediate' then 1 else 0 end)/ count(phan_loai), 2) as immediate_percentage 
from get1 
where stt = 1
Bai 2:
with login_rightaway as( 
select player_id,
event_date, 
count(distinct player_id) as cnt, 
lead(event_date, 1) over (partition by player_id order by event_date asc) as 1_day_after, dense_rank() over (partition by player_id order by event_date) as rank1 
from Activity ) 
select 
round(1.0*(sum(case when (1_day_after - event_date) = 1 then 1 else 0)/cnt), 2) as fraction from login_rightaway
where rank1 = 1
Bai 3:
with chon as(
select id, 
student, 
case when id % 2 = 0 then lag(student) over(order by id) else lead(student, 1) over(order by id) end as sx 
from Seat
 order by id ) 
select id, 
coalesce(sx, student) as student
 from chon 
Bai 4:
Select 
a.visited_on, 
sum(b.amount) as total_amount, 
rond((sum(b.amount)/7),2) as average_amount 
from (Select visited_on, sum(amount) as amount from Customer group by visited_on ) as a 
inner join (Select visited_on, sum(amount) as amount from Customer group by visited_on ) as b 
on a.visited_on>=b.visited_on and (a.visited_on - b.visited_on)<=6 
group by a.visited_on 
having count(distinct b.visited_on)=7
Bai 6:
with chon1 as( 
select name, 
salary, 
departmentId, 
dense_rank() over (partition by departmentId order by salary desc) as stt 
from Employee) 
select 
d.name as Department, 
chon1.name as Employee, 
chon1.salary as Salary 
from Department as d 
join chon1 on chon1.departmentId = d.id 
where stt <= 3
Bai 7:
with sx as(
select *, 
sum(weight) over(order by turn) as total from Queue ) 
select person_name 
from sx 
where total <= 1000
order by turn
desc limit 1
Bai 8:
with change1 as( 
select product_id, 
new_price, 
rank() over(partition by product_id order by change_date desc) as stt 
from Products 
where change_date <= '2019-08-16' ) 
select distinct Products.product_id, 
coalesce(change1.new_price, 10) as price 
from Products 
left join change1 
on Products.product_id = change1.product_id
and change1.stt = 1
